"""
Indicates that an Input Object is a OneOf Input Object (and thus requires
                        exactly one of its field be provided)
"""
directive @oneOf on INPUT_OBJECT

"""
Customization parameters for an account reference (username, avatar, etc.)
"""
type AccountCustomization {
  """Badge to be shown next to the username"""
  activeBadge: Badge

  """A custom nickname color, if changed"""
  nicknameColor: Color

  """User who owns these parameters"""
  userId: ID!
}

"""
Write this amount of messages each answering a different
message in a public chat
"""
type AnswerInChatTask implements DailyTask {
  amount: Int!
}

"""
Post this amount of comments answering a newbie
with a level smaller than `max_level`
"""
type AnswerNewbieCommentTask implements DailyTask {
  amount: Int!
  maxLevel: Int!
}

"""A badge displayed in the profile or near a username"""
type Badge {
  """When the badge was given to the user"""
  createdAt: DateTime!

  """Badge description (inline-only Markdown supported)"""
  description: String!

  """Fandom related to this badge, if any"""
  fandomId: Int

  """Unique ID for this badge (unique for every occurrence)"""
  id: ID!

  """The badge's image in its full glory and size"""
  image: ImageLink!

  """
  Arbitrary link with more information about the badge or something related to it
  
  Usually leads to `https://bonfire.moe/r/<something>`.
  """
  link: String

  """Image to be shown beside a username and in other small spaces"""
  miniImage: ImageLink!

  """Badge name"""
  name: String!

  """User who owns this badge"""
  user: User!
}

type BadgeConnection {
  """A list of edges."""
  edges: [BadgeEdge!]!

  """A list of nodes."""
  nodes: [Badge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type BadgeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Badge!
}

type Color {
  """As a CSS hex or rgba: `#RRGGBB` or `rgba(r g b, a)`"""
  css: String!

  """As an Android `Int`: `0xAARRGGBB`"""
  int: Int!
}

"""Post this amount of comments in a specific fandom"""
type CommentInFandomTask implements DailyTask {
  amount: Int!
  fandomId: Int!
}

"""
Post this amount of comments under a post from
a newbie with a level smaller than `max_level`
"""
type CommentNewbiePostTask implements DailyTask {
  amount: Int!
  maxLevel: Int!
}

"""Create and publish a post with a page of this type"""
type CreatePostWithPageTypeTask implements DailyTask {
  amount: Int!
  pageType: PageType!
}

"""Create and publish this amount of posts"""
type CreatePostsTask implements DailyTask {
  amount: Int!
}

interface DailyTask {
  amount: Int!
}

"""
Details about a fandom's chance to appear
in a [`DailyTask`]
"""
type DailyTaskFandom {
  """Numeric ID of the fandom"""
  fandomId: Int!

  """
  Relative chance that the fandom may appear
  
  This goes from `0.0` (exclusive) and up.
  """
  multiplier: Float!
}

"""State of daily tasks for a user"""
type DailyTaskInfo {
  """
  Bonus for completing the task daily.
  This one goes from `1.0` and up.
  
  `comboMultiplier` is *added* to this value to
  result in the final multiplier.
  """
  comboMultiplier: Float!

  """
  Daily task's fandom name
  
  If the [`DailyTask`] involves a fandom, this
  contains its name.
  """
  fandomName: String

  """
  Bonus for having a lower level.
  This goes from `0.0` and up.
  
  This multiplier is *added* to `comboMultiplier`
  below, not actually multiplied.
  """
  levelMultiplier: Float!

  """
  Level count the user would receive if they
  complete the task in full.
  """
  possibleReward: Int!

  """
  Amount of task units earned by the user
  
  If a user made 5 posts, the `progress`
  of a [`CreatePostsTask`] would be `5`.
  
  Note that this value can be higher than
  `total`.
  """
  progress: Int!

  """The daily task for today"""
  task: DailyTask!

  """
  Total level count earned from doing daily
  tasks
  
  The last 3 daily tasks are recounted to
  account for cheating, the older tasks are
  just accepted as-is.
  """
  totalLevels: Int!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

"""Earn this amount of karma with anything"""
type EarnAnyKarmaTask implements DailyTask {
  amount: Int!
}

"""Earn this amount of karma with posts"""
type EarnPostKarmaTask implements DailyTask {
  amount: Int!
}

"""Presets for nickname colors, unlockable after"""
enum GnicknameColorPreset {
  AQUA
  BLUE
  BONFIRE
  GREEN
  ORANGE
  PINK
  PURPLE
  RED
}

"""Information for downloading an image"""
type ImageLink {
  """Height, if available"""
  h: Int

  """Unique image ID"""
  i: Int!

  """Temporary URL for downloading the image"""
  u: String!

  """Width, if available"""
  w: Int
}

"""Reason for starting an integrity/bot check"""
enum IntentionType {
  """Just for the sake of it"""
  GENERIC
}

"""A scalar that can represent any JSON value."""
scalar JSON

"""A scalar that can represent any JSON Object value."""
scalar JSONObject

"""Legacy JSON notification"""
type LegacyNotification {
  """Notification JSON"""
  content: JSON!
}

"""Legacy JSON notification"""
input LegacyNotificationInput {
  """Notification JSON"""
  content: JSON!
}

"""
The internal result of recount a user's level

It contains all the achievements and returns details about
each of them and the total level of a person.
"""
type LevelRecountResult {
  """
  Details about each achievement's progress
  
  The key of this map is the numeric ID of the
  achievement, and the value is details about
  that achievement.
  It is guaranteed that every achievement has
  a value in here.
  (In case it doesn't, just assume it's at zero.)
  """
  achievements: JSONObject!

  """
  The user's total level
  
  The minimum is 100. In UI, the level is shown
  as a 2-decimal number, so level `540` is `5.4`
  for the user.
  """
  totalLevel: Int!

  """The user whose level was recounted"""
  user: User!
}

"""Parameters for logging in via email"""
input LoginEmailInput {
  """User's email address"""
  email: String!

  """User's password"""
  password: String!
}

"""The result of logging in via email and password"""
union LoginResult = LoginResultSuccess | LoginResultTfaRequired

"""Successful one-step login"""
type LoginResultSuccess {
  """The access token"""
  accessToken: String!

  """The refresh token"""
  refreshToken: String!
}

"""TFA is required to finish logging in"""
type LoginResultTfaRequired {
  """Type of TFA required"""
  tfaType: TfaType!

  """Token to request the status of the TFA flow"""
  tfaWaitToken: String!
}

"""Just enter the app"""
type LoginTask implements DailyTask {
  amount: Int!
}

type Mutation {
  """Bind an OAuth account to the current user"""
  bindOauth(input: OauthLoginInput!): User!
  cancelEmailChange(token: String!): Ok!
  changeEmail(newEmail: String!): Ok!
  changePassword(newPassword: String!, oldPassword: String!): Ok!

  """
  Indicate that the user intends to do an integrity/bot check for
  whatever reason.
  
  An intention token is returned, which should be used as the
  request hash (or equivalent)
  """
  createSecurityIntention(intentionType: IntentionType!): String!

  """Change the name of a user"""
  internalChangeName(newName: String!, userId: ID!): User!

  """Mark a user as logged in today"""
  internalCheckIn(userId: ID!): Ok!

  """Login via email and password"""
  loginEmail(input: LoginEmailInput!): LoginResult!

  """Login as an internal service"""
  loginInternal(key: String!): LoginResultSuccess!

  """Complete logging in via an external provider"""
  loginOauth(input: OauthLoginInput!): OauthResult!

  """Refresh the access token using the refresh token"""
  loginRefresh(refreshToken: String!): LoginResultSuccess!

  """Log out. Terminate the current session"""
  logout: Ok!

  """
  Accept the authorisation request and get the URI to redirect the client to
  
  Might also require two-factor authentication if sensitive scopes have been
  requested.
  """
  oauth2AuthorizeAccept(flowId: ID!): OAuthAuthorizationResult!

  """Revoke a previously authorised OAuth client"""
  oauth2RevokeGrant(grantId: ID!): ID!

  """Send a notification to a list of recipients"""
  postNotification(input: NotificationInput!): Ok!

  """Mark every notification received by you as read"""
  readAllNotifications: Ok!

  """Mark a single notification as read"""
  readNotification(notificationId: ID!): Notification!

  """
  Use a recovery token to reset the password
  
  The recovery token is received from the email send
  by `send_password_recovery`
  """
  recoverPassword(newPassword: String!, token: String!): Ok!

  """Create a new account with email and password"""
  registerEmail(input: RegisterEmailInput!): RegisterEmailResult!

  """Resend verification email"""
  resendVerification(email: String!): Ok!

  """Decode and save Play Integrity token"""
  savePlayIntegrity(intentionToken: String!, packageName: String!, token: String!): Ok!

  """Send an email with a password recovery link"""
  sendPasswordRecovery(email: String!): Ok!

  """Set the items of the badge shelf in the profile"""
  setBadgeShelf(badgeIds: [ID]!): ProfileCustomization!

  """Set own birthday for age verification purposes"""
  setBirthday(birthday: NaiveDate!): User!

  """Set a custom nickname color from the given presets"""
  setNicknameColor(preset: GnicknameColorPreset): AccountCustomization!

  """
  Set the notification token and type of the currently authenticated session
  
  A session can only have a single notification token.
  """
  setNotificationToken(token: String!, tokenType: NotificationTokenType!): Ok!

  """Show or hide the badge shelf in the profile"""
  showBadgeShelf(show: Boolean!): ProfileCustomization!

  """Terminate an auth session"""
  terminateSession(sessionId: ID!): ID!

  """Verify user's email after registration or deanonymizing"""
  verifyEmail(token: String!): VerifyEmailResult!
}

"""
ISO 8601 calendar date without timezone.
Format: %Y-%m-%d

# Examples

* `1994-11-13`
* `2000-02-24`
"""
scalar NaiveDate

"""A notification"""
type Notification {
  """Time when notification was sent"""
  createdAt: DateTime!

  """Unique ID for this notification (unique across users)"""
  id: ID!

  """Notification payload"""
  payload: NotificationPayload!

  """Whether notification has been read"""
  read: Boolean!

  """User to whom this notification is directed"""
  user: User!
}

input NotificationInput {
  ephemeral: Boolean!
  onlineOnly: Boolean!
  payload: NotificationPayloadInput!
  recipients: [NotificationRecipient!]!
}

"""Different types of notifications"""
union NotificationPayload = LegacyNotification

"""Different types of notifications"""
input NotificationPayloadInput {
  """Different types of notifications"""
  legacy: LegacyNotificationInput
}

input NotificationRecipient {
  session: SessionRecipient
  user: UserRecipient
}

"""Kinds of upstream services for sending notifications"""
enum NotificationTokenType {
  """Firebase Cloud Messaging"""
  FCM
}

union OAuthAuthorizationResult = OauthAuthorizationRedirect | OauthAuthorizationTfaRequired

union OAuthAuthorizeInfo = OauthAlreadyAuthorized | OauthAuthorizationPrompt

"""Information about some OAuth client"""
type OAuthClient {
  """Name of the client to be displayed to the user"""
  displayName: String!

  """Unique ID of this client"""
  id: ID!

  """Whether this client is an official Bonfire app"""
  official: Boolean!

  """Link to the privacy policy of this client"""
  privacyPolicyUrl: String!

  """Link to this client's terms of service"""
  tosUrl: String
}

type OAuthGrant {
  """Information about the client authorised"""
  client: OAuthClient!

  """When the grant was initially created"""
  createdAt: DateTime!

  """Unique ID for this grant"""
  id: ID!

  """When was the last time this grant was reauthorised"""
  lastUsedAt: DateTime!

  """What scopes this grant has already"""
  scope: [String!]!
  user: User!
}

"""
The client has already been authorised, it's safe to just redirect them
"""
type OauthAlreadyAuthorized {
  """Where to send the user"""
  redirectUri: String!
}

"""A confirmation prompt is required to authorise this client"""
type OauthAuthorizationPrompt {
  """Information about the OAuth client"""
  client: OAuthClient!

  """ID for the flow created for this authorisation request"""
  flowId: Int

  """What scopes the client is requesting"""
  scopes: [String!]!
}

"""The authorisation was successful and user can proceed to this URL"""
type OauthAuthorizationRedirect {
  """The URL to redirect the user to"""
  redirectUri: String!
}

"""Two-factor authentication is required to approve this request"""
type OauthAuthorizationTfaRequired {
  """What TFA type to use"""
  tfaType: TfaType!

  """Token for requesting the TFA result with `check_tfa_status`"""
  tfaWaitToken: String!
}

"""
Parameters for logging in via OAuth

It is used in `login_oauth` and `bind_oauth`.
"""
input OauthLoginInput {
  """The authorization code"""
  code: String!

  """
  Unique nonce from [`OAuthUrl`]
  
  [`OAuthUrl`]: super::oauth_url::OAuthUrl
  """
  nonce: String!

  """OAuth code issuer"""
  provider: OauthProvider!
}

"""An OAuth auth provider"""
enum OauthProvider {
  """`accounts.google.com`"""
  GOOGLE

  """Old Firebase authentication method. Not actually OAuth"""
  LEGACY_FIREBASE
}

"""Result of logging in via an OAuth provider"""
type OauthResult {
  """
  `true` if there's a user with the same email
  but not OAuth provider account
  """
  emailAlreadyBound: Boolean!

  """If login is successful, tokens to log in"""
  tokens: LoginResultSuccess
}

"""
Client information to log in with an OAuth provider

Get this with `oauth_url`
"""
type OauthUrl {
  """Unique nonce from the URL"""
  nonce: String!

  """Requested scopes"""
  scope: String!

  """Unique CSRF token from the URL"""
  state: String!

  """Full URL for the browser"""
  url: String!
}

"""The string `"ok"`. That's it"""
scalar Ok

"""Information about pagination in a connection"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

enum PageType {
  CAMPFIRE_OBJECT
  CODE
  DOWNLOAD
  IMAGE
  IMAGES
  LINK
  LINK_IMAGE
  POLLING
  QUOTE
  SPOILER
  TABLE
  TEXT
  USER_ACTIVITY
  VIDEO
}

"""User's base permission level"""
enum PermissionLevel {
  """Highest ranking user"""
  ADMIN

  """A member of highly trusted meta-staff"""
  SUPERMOD

  """Internal system account"""
  SYSTEM

  """Regular user"""
  USER
}

"""Post this amount of comments"""
type PostCommentsTask implements DailyTask {
  amount: Int!
}

"""Create and publish this amount of posts in a specific fandom"""
type PostInFandomTask implements DailyTask {
  amount: Int!
  fandomId: Int!
}

"""Full page profile customizations"""
type ProfileCustomization {
  """Account part of customization parameters"""
  account: AccountCustomization!

  """
  Badges to be shown on the badge shelf
  
  If this is `null`, the shelf must be hidden.
  If a badge is `null`, that spot must be empty.
  """
  badgeShelf: [Badge]

  """User who owns these parameters"""
  userId: ID!
}

type Query {
  """Get the list of currently active sessions"""
  activeSessions(offset: Int! = 0): [Session!]!

  """Get a single Badge by its ID"""
  badge(id: ID!): Badge

  """Get the user that a recovery token changes password to"""
  checkRecoveryToken(token: String!): User!

  """
  Internal method for fetching AccountCustomization skipping loading the User
  """
  internalAccountCustomization(userId: Int!): AccountCustomization!

  """
  Force a recount of a user's level
  
  This method is for internal services only
  and you morons can't use it.
  """
  internalRecountLevel(userId: Int!): LevelRecountResult!

  """Get currently authenticated user"""
  me: User!

  """
  List notifications received by you, newest first
  
  Use `before` for pagination, including the last notification's `created_at`.
  """
  notifications(before: DateTime, typeFilter: [Int!]): [Notification!]!

  """
  Get the list of clients which were authorised by the currently authenticated user
  """
  oauth2Grants(limit: Int!, offset: Int!): [OAuthGrant!]!

  """Get info for authorising an OAuth client"""
  oauthAuthorizeInfo(query: JSONObject!): OAuthAuthorizeInfo!

  """Get the necessary information to log in with an OAuth provider"""
  oauthUrl(provider: OauthProvider!): OauthUrl!

  """Get a [`User`] by their ID"""
  userById(id: ID!): User

  """
  Get a [`User`] by their ID or username
  
  Since users can't have a username consisting only
  of digits,
  """
  userBySlug(slug: String!): User
}

"""Rate this amount of different publications"""
type RatePublicationsTask implements DailyTask {
  amount: Int!
}

"""Parameters for registering a new account with email"""
input RegisterEmailInput {
  """Email address for the new account"""
  email: String!

  """Password for the new account"""
  password: String!
}

"""New account registration result"""
type RegisterEmailResult {
  """Access token for the user"""
  accessToken: String!

  """Refresh token for the user"""
  refreshToken: String!

  """Newly registered user"""
  user: User!
}

"""Various security settings of a [`User`]"""
type SecuritySettings {
  """Whether this user has been migrated from Firebase"""
  firebaseLinked: Boolean!

  """Whether this user has a Google account linked"""
  googleLinked: Boolean!
}

type Session {
  """Whether the session is active and not expired"""
  active: Boolean!

  """First login timestamp"""
  createdAt: DateTime!

  """Whether this is the currently authenticated session"""
  current: Boolean!

  """The session ID"""
  id: ID!

  """Last IP that refreshed the session"""
  ip: String

  """Last login_refresh call timestamp"""
  lastActive: DateTime!

  """
  Full user agent string of the client that
  last refreshed the session
  """
  userAgent: String
}

input SessionRecipient {
  sessionId: Int!
}

"""A two-factor authentication method"""
enum TfaType {
  """
  The user should visit a link from the email
  sent to their address.
  """
  EMAIL_LINK

  """
  The user should input a one-time code from
  their authenticator app.
  """
  TOTP
}

"""A user"""
type User {
  """Get all badges that a user owns, newest first"""
  badges(after: String): BadgeConnection!

  """
  Get the birthday date of this user
  
  This field is only available to this user and System.
  If the user hasn't set a birthday, `null` is returned.
  """
  birthday: NaiveDate

  """Get the total level of a user (cached)"""
  cachedLevel: Int!

  """Account creation date"""
  createdAt: DateTime!

  """Account customization parameters (username, avatar, etc.)"""
  customization: AccountCustomization!

  """Get daily task information for this User"""
  dailyTask: DailyTaskInfo!

  """
  Get fandoms this user is active in
  
  These fandoms have a chance of appearing in
  a daily task, their chance proportional to
  the `multiplier` field in [`DailyTaskFandom`].
  """
  dailyTaskFandoms: [DailyTaskFandom!]!

  """
  User's email
  
  The email is only visible to the user themselves and
  to supermods.
  """
  email: String

  """
  User's ID
  
  Note that it is not guaranteed to be an
  integer.
  It should be treated as one only
  when another API requires it.
  """
  id: ID!

  """
  Get whether the user is `age` years old
  
  This field is only available to this user and System.
  If the user hasn't set a birthday, `null` is returned.
  """
  isYearsOld(age: Int!): Boolean

  """Base permission level for the user"""
  permissionLevel: PermissionLevel!

  """Full page profile information for this user"""
  profile: ProfileCustomization!

  """Get some security and login options for this user"""
  securitySettings: SecuritySettings!

  """Unique nickname for the user"""
  username: String!
}

input UserRecipient {
  userId: Int!
}

type VerifyEmailResult {
  """Verified user"""
  user: User!
}

"""Write this amount of messages in a public chat"""
type WriteMessagesTask implements DailyTask {
  amount: Int!
}
